# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

try:
  data_file = open("UD.txt", "r")
  line_list=[]
  userName_list=[line_list[0].split(',') for i in data_file if i[0:3] !='USE']
  password_list=[line_list[1].rstrip() for i in data_file if i[0:3] !='PAS' ]#remove spaces
  

except FileNotFoundError as e:
  print(e)

  
else:
  #To chceck the correct input,
  while True:#while not False
    print("Login or create a new user? Select L to login, select C to create new user.")
    choice =input()
    if choice=="L":
      print("Please enter your user name and hit enter: ")
    elif choice=="C":
      username=input("Please enter your first name, last name, and student ID, separated by a space:\n")
      if username in userName_list:
        userNameindex=userName_list.index(username)#the positio of user name
        password=input("Enter password:\n")
        if password_list[userNameindex]==password:
          print("you are logged in")
      else:
        print('Wrong password')
    else:
      print("User not found")
  
firstName, lastName, id = input("").split()
username=firstName[0].lower()+lastName[:2].lower()+id[:3]
  while True:
    print("Please enter password")
    password=input()
    print("Please reenter password:")
    rePassword=input()
    if(password==rePassword):
      break
    userName_list.append(username)
    password_list.append(password)
    print('User Created')
